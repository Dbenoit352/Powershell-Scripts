# Check for Administrator privileges
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Warning "Please run this script as an Administrator!"
    Break
}

# Ask user about system type
do {
    $response = Read-Host "Is this a laptop? (y/n)"
} while ($response -notmatch '^[yn]$')
$isLaptop = $response -eq 'y'

Write-Output "`nGetting available power plans..."

# Define known power plan GUIDs and names based on system type
$knownPlans = @{}

if ($isLaptop) {
    # Laptop-specific plans
    $knownPlans = @{
        "381b4222-f694-41f0-9685-ff5bb260df2e" = "Balanced"
        "245d8541-3943-4422-b025-13a784f679b7" = "Best Power Efficiency"
        "1e329c3b-7f7c-42e7-a321-c324c4b7c2b8" = "Best Performance"
    }
} else {
    # Desktop plans
    $knownPlans = @{
        "381b4222-f694-41f0-9685-ff5bb260df2e" = "Balanced"
        "8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c" = "High Performance"
        "e9a42b02-d5df-448d-aa00-03f14749eb61" = "Ultimate Performance"
    }
}

$plans = @()
$index = 0

Write-Output "`nAvailable Power Plans:"
foreach ($plan in $knownPlans.GetEnumerator()) {
    $result = powercfg /query $plan.Key 2>$null
    if ($result -notmatch "does not exist") {
        $plans += [PSCustomObject]@{
            Index = $index
            Name = $plan.Value
            GUID = $plan.Key
        }
        Write-Output "[$index] $($plan.Value)"
        $index++
    }
}

# Get current active plan
$currentPlan = powercfg /getactivescheme
Write-Output "`nCurrent active plan: $currentPlan"

# Get user choice
do {
    $choice = Read-Host "`nSelect power plan number (0-$($plans.Count - 1))"
} while ($choice -notmatch '^\d+$' -or [int]$choice -lt 0 -or [int]$choice -ge $plans.Count)

# Set selected power plan
$selectedPlan = $plans[[int]$choice]
Write-Output "`nSetting power plan to: $($selectedPlan.Name)"
powercfg /setactive $selectedPlan.GUID

# Function to ask about power settings
function Get-PowerChoice {
    param (
        [string]$setting,
        [string]$state
    )
    do {
        $response = Read-Host "Disable $setting ($state)? (y/n)"
    } while ($response -notmatch '^[yn]$')
    return $response -eq 'y'
}

Write-Output "`nConfigure Power Settings:"

# Monitor timeout
if (Get-PowerChoice "monitor timeout" "Plugged In") { powercfg /change monitor-timeout-ac 0 }
if ($isLaptop) {
    if (Get-PowerChoice "monitor timeout" "On Battery") { powercfg /change monitor-timeout-dc 0 }
}

# Disk timeout
if (Get-PowerChoice "disk timeout" "Plugged In") { powercfg /change disk-timeout-ac 0 }
if ($isLaptop) {
    if (Get-PowerChoice "disk timeout" "On Battery") { powercfg /change disk-timeout-dc 0 }
}

# Sleep timeout
if (Get-PowerChoice "sleep timeout" "Plugged In") { powercfg /change standby-timeout-ac 0 }
if ($isLaptop) {
    if (Get-PowerChoice "sleep timeout" "On Battery") { powercfg /change standby-timeout-dc 0 }
}

# Hibernate timeout
if (Get-PowerChoice "hibernate timeout" "Plugged In") { powercfg /change hibernate-timeout-ac 0 }
if ($isLaptop) {
    if (Get-PowerChoice "hibernate timeout" "On Battery") { powercfg /change hibernate-timeout-dc 0 }
}

# Lid settings if laptop
if ($isLaptop) {
    Write-Output "`nLid Close Action Options:"
    Write-Output "0 = Do nothing"
    Write-Output "1 = Sleep"
    Write-Output "2 = Hibernate"
    Write-Output "3 = Shut down"
    
    do {
        $lidAC = Read-Host "Select lid close action when Plugged In (0-3)"
    } while ($lidAC -notmatch '^[0-3]$')
    powercfg /setacvalueindex SCHEME_CURRENT 4f971e89-eebd-4455-a8de-9e59040e7347 5ca83367-6e45-459f-a27b-476b1d01c936 $lidAC
    
    do {
        $lidDC = Read-Host "Select lid close action when On Battery (0-3)"
    } while ($lidDC -notmatch '^[0-3]$')
    powercfg /setdcvalueindex SCHEME_CURRENT 4f971e89-eebd-4455-a8de-9e59040e7347 5ca83367-6e45-459f-a27b-476b1d01c936 $lidDC
}

Write-Output "`nFinal power configuration:"
powercfg /getactivescheme
