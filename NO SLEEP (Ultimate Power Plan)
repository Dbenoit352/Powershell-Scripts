# Check for Administrator privileges
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Warning "Please run this script as an Administrator!"
    Break
}

# First try to get all existing power schemes
Write-Output "Getting all available power plans..."
$plans = @()
# Use /L instead of /list to show hidden power plans
$powerCfgOutput = powercfg /L
$planRegex = "Power Scheme GUID: (.*) \((.*)\)"
$powerCfgOutput -split "`n" | ForEach-Object {
    if ($_ -match $planRegex) {
        $guid = $matches[1].Trim()
        $name = $matches[2].Trim()
        $plans += [PSCustomObject]@{
            Name = $name
            GUID = $guid
        }
    }
}

# Show all available plans
Write-Output "`nAvailable Power Plans:"
for ($i = 0; $i -lt $plans.Count; $i++) {
    Write-Output "[$i] $($plans[$i].Name)"
}

# Get user choice for power plan
do {
    $choice = Read-Host "`nSelect power plan number (0-$($plans.Count - 1))"
} while ($choice -notmatch '^\d+$' -or [int]$choice -lt 0 -or [int]$choice -ge $plans.Count)

# Set selected power plan
$selectedPlan = $plans[[int]$choice]
Write-Output "`nSetting power plan to: $($selectedPlan.Name)"
powercfg /setactive $selectedPlan.GUID

# Function to ask about power settings
function Get-PowerChoice {
    param (
        [string]$setting,
        [string]$state
    )
    do {
        $response = Read-Host "Disable $setting ($state)? (y/n)"
    } while ($response -notmatch '^[yn]$')
    return $response -eq 'y'
}

Write-Output "`n[Step 2] Configure Power Settings:"

# Monitor timeout
if (Get-PowerChoice "monitor timeout" "Plugged In") { powercfg /change monitor-timeout-ac 0 }
if (Get-PowerChoice "monitor timeout" "On Battery") { powercfg /change monitor-timeout-dc 0 }

# Disk timeout
if (Get-PowerChoice "disk timeout" "Plugged In") { powercfg /change disk-timeout-ac 0 }
if (Get-PowerChoice "disk timeout" "On Battery") { powercfg /change disk-timeout-dc 0 }

# Sleep timeout
if (Get-PowerChoice "sleep timeout" "Plugged In") { powercfg /change standby-timeout-ac 0 }
if (Get-PowerChoice "sleep timeout" "On Battery") { powercfg /change standby-timeout-dc 0 }

# Hibernate timeout
if (Get-PowerChoice "hibernate timeout" "Plugged In") { powercfg /change hibernate-timeout-ac 0 }
if (Get-PowerChoice "hibernate timeout" "On Battery") { powercfg /change hibernate-timeout-dc 0 }

# Lid settings for laptops
$isLaptop = (Get-WmiObject -Class Win32_ComputerSystem).PCSystemType -eq 2
if ($isLaptop) {
    Write-Output "`nLid Close Action Options:"
    Write-Output "0 = Do nothing"
    Write-Output "1 = Sleep"
    Write-Output "2 = Hibernate"
    Write-Output "3 = Shut down"
    
    do {
        $lidAC = Read-Host "Select lid close action when Plugged In (0-3)"
    } while ($lidAC -notmatch '^[0-3]$')
    powercfg /setacvalueindex $selectedPlan.GUID 4f971e89-eebd-4455-a8de-9e59040e7347 5ca83367-6e45-459f-a27b-476b1d01c936 $lidAC
    
    do {
        $lidDC = Read-Host "Select lid close action when On Battery (0-3)"
    } while ($lidDC -notmatch '^[0-3]$')
    powercfg /setdcvalueindex $selectedPlan.GUID 4f971e89-eebd-4455-a8de-9e59040e7347 5ca83367-6e45-459f-a27b-476b1d01c936 $lidDC
}

# Apply all changes
powercfg /setactive $selectedPlan.GUID

Write-Output "`nPower settings configured successfully!"
powercfg /getactivescheme
